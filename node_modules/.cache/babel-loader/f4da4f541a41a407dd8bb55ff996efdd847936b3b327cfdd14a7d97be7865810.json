{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nvar createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Container);\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports;\n\n        // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n        if (existing) {\n          options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n        } else {\n          options.transports = [];\n        }\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n      return this.loggers.get(id);\n    }\n\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n      if (id) {\n        return this._removeLogger(id);\n      }\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n      var logger = this.loggers.get(id);\n      logger.close();\n      this._delete(id);\n    }\n\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n  return Container;\n}();","map":{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","t","_toPrimitive","String","r","e","toPrimitive","call","Number","createLogger","require","module","exports","Container","options","arguments","undefined","loggers","Map","value","add","id","_this","has","assign","existing","transports","Array","isArray","slice","logger","on","_delete","set","get","close","_this2","_removeLogger","forEach","val"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/winston/dist/winston/container.js"],"sourcesContent":["/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Container);\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports;\n\n        // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n        if (existing) {\n          options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n        } else {\n          options.transports = [];\n        }\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n      return this.loggers.get(id);\n    }\n\n    /**\n     * Retreives a `winston.Logger` instance for the specified `id`. If\n     * an instance does not exist, one is created.\n     * @param {!string} id - The id of the Logger to get.\n     * @param {?Object} [options] - Options for the Logger instance.\n     * @returns {Logger} - A configured Logger instance with a specified id.\n     */\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n\n    /**\n     * Check if the container has a logger with the id.\n     * @param {?string} id - The id of the Logger instance to find.\n     * @returns {boolean} - Boolean value indicating if this instance has a\n     * logger with the specified `id`.\n     */\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n\n    /**\n     * Closes a `Logger` instance with the specified `id` if it exists.\n     * If no `id` is supplied then all Loggers are closed.\n     * @param {?string} id - The id of the Logger instance to close.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n      if (id) {\n        return this._removeLogger(id);\n      }\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n\n    /**\n     * Remove a logger based on the id.\n     * @param {!string} id - The id of the logger to remove.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n      var logger = this.loggers.get(id);\n      logger.close();\n      this._delete(id);\n    }\n\n    /**\n     * Deletes a `Logger` instance with the specified `id`.\n     * @param {!string} id - The id of the Logger instance to delete from\n     * container.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n  return Container;\n}();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,SAASA,OAAOA,CAACC,CAAC,EAAE;EAAE,yBAAyB;;EAAE,OAAOD,OAAO,GAAG,UAAU,IAAI,OAAOE,MAAM,IAAI,QAAQ,IAAI,OAAOA,MAAM,CAACC,QAAQ,GAAG,UAAUF,CAAC,EAAE;IAAE,OAAO,OAAOA,CAAC;EAAE,CAAC,GAAG,UAAUA,CAAC,EAAE;IAAE,OAAOA,CAAC,IAAI,UAAU,IAAI,OAAOC,MAAM,IAAID,CAAC,CAACG,WAAW,KAAKF,MAAM,IAAID,CAAC,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,CAAC;EAAE,CAAC,EAAED,OAAO,CAACC,CAAC,CAAC;AAAE;AAC7T,SAASK,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AACxJ,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEU,cAAc,CAACN,UAAU,CAACO,GAAG,CAAC,EAAEP,UAAU,CAAC;EAAE;AAAE;AAC5U,SAASQ,YAAYA,CAACf,WAAW,EAAEgB,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEd,iBAAiB,CAACF,WAAW,CAACH,SAAS,EAAEmB,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEf,iBAAiB,CAACF,WAAW,EAAEiB,WAAW,CAAC;EAAEN,MAAM,CAACC,cAAc,CAACZ,WAAW,EAAE,WAAW,EAAE;IAAEU,QAAQ,EAAE;EAAM,CAAC,CAAC;EAAE,OAAOV,WAAW;AAAE;AAC5R,SAASa,cAAcA,CAACK,CAAC,EAAE;EAAE,IAAIb,CAAC,GAAGc,YAAY,CAACD,CAAC,EAAE,QAAQ,CAAC;EAAE,OAAO,QAAQ,IAAI1B,OAAO,CAACa,CAAC,CAAC,GAAGA,CAAC,GAAGe,MAAM,CAACf,CAAC,CAAC;AAAE;AAC/G,SAASc,YAAYA,CAACD,CAAC,EAAEG,CAAC,EAAE;EAAE,IAAI,QAAQ,IAAI7B,OAAO,CAAC0B,CAAC,CAAC,IAAI,CAACA,CAAC,EAAE,OAAOA,CAAC;EAAE,IAAII,CAAC,GAAGJ,CAAC,CAACxB,MAAM,CAAC6B,WAAW,CAAC;EAAE,IAAI,KAAK,CAAC,KAAKD,CAAC,EAAE;IAAE,IAAIjB,CAAC,GAAGiB,CAAC,CAACE,IAAI,CAACN,CAAC,EAAEG,CAAC,IAAI,SAAS,CAAC;IAAE,IAAI,QAAQ,IAAI7B,OAAO,CAACa,CAAC,CAAC,EAAE,OAAOA,CAAC;IAAE,MAAM,IAAIJ,SAAS,CAAC,8CAA8C,CAAC;EAAE;EAAE,OAAO,CAAC,QAAQ,KAAKoB,CAAC,GAAGD,MAAM,GAAGK,MAAM,EAAEP,CAAC,CAAC;AAAE;AAC3T,IAAIQ,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE7C;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,aAAa,YAAY;EACxC;AACF;AACA;AACA;AACA;EACE,SAASC,SAASA,CAAA,EAAG;IACnB,IAAIC,OAAO,GAAGC,SAAS,CAAC1B,MAAM,GAAG,CAAC,IAAI0B,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpFlC,eAAe,CAAC,IAAI,EAAEgC,SAAS,CAAC;IAChC,IAAI,CAACI,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB,IAAI,CAACJ,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEhB,YAAY,CAACe,SAAS,EAAE,CAAC;IACvBhB,GAAG,EAAE,KAAK;IACVsB,KAAK,EAAE,SAASC,GAAGA,CAACC,EAAE,EAAEP,OAAO,EAAE;MAC/B,IAAIQ,KAAK,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,CAACL,OAAO,CAACM,GAAG,CAACF,EAAE,CAAC,EAAE;QACzB;QACA;QACAP,OAAO,GAAGpB,MAAM,CAAC8B,MAAM,CAAC,CAAC,CAAC,EAAEV,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC;QACpD,IAAIW,QAAQ,GAAGX,OAAO,CAACY,UAAU,IAAI,IAAI,CAACZ,OAAO,CAACY,UAAU;;QAE5D;QACA;QACA,IAAID,QAAQ,EAAE;UACZX,OAAO,CAACY,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,GAAGA,QAAQ,CAACI,KAAK,CAAC,CAAC,GAAG,CAACJ,QAAQ,CAAC;QAC9E,CAAC,MAAM;UACLX,OAAO,CAACY,UAAU,GAAG,EAAE;QACzB;QACA,IAAII,MAAM,GAAGrB,YAAY,CAACK,OAAO,CAAC;QAClCgB,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,YAAY;UAC7B,OAAOT,KAAK,CAACU,OAAO,CAACX,EAAE,CAAC;QAC1B,CAAC,CAAC;QACF,IAAI,CAACJ,OAAO,CAACgB,GAAG,CAACZ,EAAE,EAAES,MAAM,CAAC;MAC9B;MACA,OAAO,IAAI,CAACb,OAAO,CAACiB,GAAG,CAACb,EAAE,CAAC;IAC7B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDxB,GAAG,EAAE,KAAK;IACVsB,KAAK,EAAE,SAASe,GAAGA,CAACb,EAAE,EAAEP,OAAO,EAAE;MAC/B,OAAO,IAAI,CAACM,GAAG,CAACC,EAAE,EAAEP,OAAO,CAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDjB,GAAG,EAAE,KAAK;IACVsB,KAAK,EAAE,SAASI,GAAGA,CAACF,EAAE,EAAE;MACtB,OAAO,CAAC,CAAC,IAAI,CAACJ,OAAO,CAACM,GAAG,CAACF,EAAE,CAAC;IAC/B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDxB,GAAG,EAAE,OAAO;IACZsB,KAAK,EAAE,SAASgB,KAAKA,CAACd,EAAE,EAAE;MACxB,IAAIe,MAAM,GAAG,IAAI;MACjB,IAAIf,EAAE,EAAE;QACN,OAAO,IAAI,CAACgB,aAAa,CAAChB,EAAE,CAAC;MAC/B;MACA,IAAI,CAACJ,OAAO,CAACqB,OAAO,CAAC,UAAUC,GAAG,EAAE1C,GAAG,EAAE;QACvC,OAAOuC,MAAM,CAACC,aAAa,CAACxC,GAAG,CAAC;MAClC,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDA,GAAG,EAAE,eAAe;IACpBsB,KAAK,EAAE,SAASkB,aAAaA,CAAChB,EAAE,EAAE;MAChC,IAAI,CAAC,IAAI,CAACJ,OAAO,CAACM,GAAG,CAACF,EAAE,CAAC,EAAE;QACzB;MACF;MACA,IAAIS,MAAM,GAAG,IAAI,CAACb,OAAO,CAACiB,GAAG,CAACb,EAAE,CAAC;MACjCS,MAAM,CAACK,KAAK,CAAC,CAAC;MACd,IAAI,CAACH,OAAO,CAACX,EAAE,CAAC;IAClB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDxB,GAAG,EAAE,SAAS;IACdsB,KAAK,EAAE,SAASa,OAAOA,CAACX,EAAE,EAAE;MAC1B,IAAI,CAACJ,OAAO,CAAC,QAAQ,CAAC,CAACI,EAAE,CAAC;IAC5B;EACF,CAAC,CAAC,CAAC;EACH,OAAOR,SAAS;AAClB,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}