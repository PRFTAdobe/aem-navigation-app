{"ast":null,"code":"/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULY_INITIAL_DELAY_MS = 100;\nconst loggerNamespace = '@adobe/aio-lib-core-networking:HttpExponentialBackoff';\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, {\n  level: process.env.LOG_LEVEL\n});\nconst {\n  createFetch\n} = require('./utils');\n\n/* global Request, Response, ProxyAuthOptions */ // for linter\n\n/**\n * Fetch Retry Options\n *\n * @typedef {object} RetryOptions\n * @property {number} maxRetries the maximum number of retries to try (default:3)\n * @property {number} initialDelayInMillis the initial delay in milliseconds (default:100ms)\n * @property {ProxyAuthOptions} proxy  the (optional) proxy auth options\n */\n\n/**\n * This class provides methods to implement fetch with retries.\n * The retries use exponential backoff strategy\n * with defaults set to max of 3 retries and initial Delay as 100ms\n */\nclass HttpExponentialBackoff {\n  /**\n   * This function will retry connecting to a url end-point, with\n   * exponential backoff. Returns a Promise.\n   *\n   * @param {string} url endpoint url\n   * @param {object|Request} requestOptions request options\n   * @param {RetryOptions} [retryOptions] (optional) retry options\n   * @param {Function|Array} [retryOn] (optional) Function or Array. If provided, will be used instead of the default\n   * @param {Function|number} [retryDelay] (optional) Function or number. If provided, will be used instead of the default\n   * @returns {Promise<Response>} Promise object representing the http response\n   */\n  async exponentialBackoff(url, requestOptions, retryOptions = {}, retryOn, retryDelay) {\n    const {\n      maxRetries = DEFAULT_MAX_RETRIES,\n      initialDelayInMillis = DEFAULY_INITIAL_DELAY_MS,\n      proxy\n    } = retryOptions;\n    return this.exponentialBackoffHelper(url, requestOptions, {\n      maxRetries,\n      initialDelayInMillis,\n      proxy\n    }, retryOn, retryDelay);\n  }\n\n  /**\n    * This function is to be called from any SDK that needs to implement fetch with retries.\n    * If retryOn is provided, the default implementation of retryOn will not be used.\n    * In case of a custom retryOn, care should be taken to handle number of retries.\n    * Fetch-Retry honors only one of retryOn or retries options in the request.\n    *\n    * @param {string} url endpoint url\n    * @param {Request} requestOptions request options\n    * @param {RetryOptions} retryOptions retry options with keys being maxRetries and initialDelay in ms\n    * @param {Function|Array} retryOn Optional Function or Array. If provided, will be used instead of the default\n    * @param {Function|number} retryDelay Optional Function or number. If provided, will be used instead of the default\n    * @private\n    */\n  async exponentialBackoffHelper(url, requestOptions, retryOptions, retryOn, retryDelay) {\n    const retryFunctions = this.__getRetryOptions(retryOptions.maxRetries, retryOptions.initialDelayInMillis);\n    requestOptions.retries = retryOptions.maxRetries;\n    requestOptions.retryOn = retryOn || retryFunctions.retryOn;\n    requestOptions.retryDelay = retryDelay || retryFunctions.retryDelay;\n    const proxyFetch = createFetch(retryOptions.proxy);\n    const fetch = require('fetch-retry')(proxyFetch);\n    return fetch(url, requestOptions);\n  }\n\n  /**\n    * Fetch the retry options with max retries and initial delay in millis\n    *\n    * @param {number} retries Max number of retries\n    * @param {number} initialDelayInMillis used for exponential backoff as the multiplying factor\n    * @returns {object} retryOptions {{retryDelay: (function(*=, *, *): number), retryOn: (function(...[*]=))}}\n    * @private\n    */\n  __getRetryOptions(retries, initialDelayInMillis) {\n    return {\n      retryOn: this.__getRetryOn(retries),\n      retryDelay: this.__getRetryDelay(initialDelayInMillis)\n    };\n  }\n\n  /**\n    * The function that evaluates the condition for retries.\n    * The retryOn function must return a boolean on evaluation\n    *\n    * @param {number} retries Max number of retries\n    * @returns {Function} retryOnFunction {function(...[*]=)}\n    * @private\n    */\n  __getRetryOn(retries) {\n    return function (attempt, error, response) {\n      if (attempt < retries && (error !== null || response.status > 499 && response.status < 600)) {\n        const msg = `Retrying after attempt ${attempt + 1}. failed: ${error || response.statusText}`;\n        logger.debug(msg);\n        return true;\n      }\n      return false;\n    };\n  }\n\n  /**\n    * Retry Delay returns a function that implements exponential backoff\n    *\n    * @param {number} initialDelayInMillis The multiplying factor and the initial delay. Eg. 100 would mean the retries would be spaced at 100, 200, 400, .. ms\n    * @returns {Function} retryDelayFunction {function(*=, *, *): number}\n    * @private\n    */\n  __getRetryDelay(initialDelayInMillis) {\n    return function (attempt, error, response) {\n      const timeToWait = Math.pow(2, attempt) * initialDelayInMillis; // 1000, 2000, 4000\n      const msg = `Request will be retried after ${timeToWait} ms`;\n      logger.debug(msg);\n      return timeToWait;\n    };\n  }\n}\nmodule.exports = HttpExponentialBackoff;","map":{"version":3,"names":["DEFAULT_MAX_RETRIES","DEFAULY_INITIAL_DELAY_MS","loggerNamespace","logger","require","level","process","env","LOG_LEVEL","createFetch","HttpExponentialBackoff","exponentialBackoff","url","requestOptions","retryOptions","retryOn","retryDelay","maxRetries","initialDelayInMillis","proxy","exponentialBackoffHelper","retryFunctions","__getRetryOptions","retries","proxyFetch","fetch","__getRetryOn","__getRetryDelay","attempt","error","response","status","msg","statusText","debug","timeToWait","Math","pow","module","exports"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/@adobe/aio-lib-core-networking/src/HttpExponentialBackoff.js"],"sourcesContent":["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst DEFAULT_MAX_RETRIES = 3\nconst DEFAULY_INITIAL_DELAY_MS = 100\nconst loggerNamespace = '@adobe/aio-lib-core-networking:HttpExponentialBackoff'\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, { level: process.env.LOG_LEVEL })\nconst { createFetch } = require('./utils')\n\n/* global Request, Response, ProxyAuthOptions */ // for linter\n\n/**\n * Fetch Retry Options\n *\n * @typedef {object} RetryOptions\n * @property {number} maxRetries the maximum number of retries to try (default:3)\n * @property {number} initialDelayInMillis the initial delay in milliseconds (default:100ms)\n * @property {ProxyAuthOptions} proxy  the (optional) proxy auth options\n */\n\n/**\n * This class provides methods to implement fetch with retries.\n * The retries use exponential backoff strategy\n * with defaults set to max of 3 retries and initial Delay as 100ms\n */\nclass HttpExponentialBackoff {\n  /**\n   * This function will retry connecting to a url end-point, with\n   * exponential backoff. Returns a Promise.\n   *\n   * @param {string} url endpoint url\n   * @param {object|Request} requestOptions request options\n   * @param {RetryOptions} [retryOptions] (optional) retry options\n   * @param {Function|Array} [retryOn] (optional) Function or Array. If provided, will be used instead of the default\n   * @param {Function|number} [retryDelay] (optional) Function or number. If provided, will be used instead of the default\n   * @returns {Promise<Response>} Promise object representing the http response\n   */\n  async exponentialBackoff (url, requestOptions, retryOptions = {},\n    retryOn, retryDelay) {\n    const {\n      maxRetries = DEFAULT_MAX_RETRIES,\n      initialDelayInMillis = DEFAULY_INITIAL_DELAY_MS,\n      proxy\n    } = retryOptions\n    return this.exponentialBackoffHelper(url, requestOptions,\n      { maxRetries, initialDelayInMillis, proxy }, retryOn, retryDelay)\n  }\n\n  /**\n    * This function is to be called from any SDK that needs to implement fetch with retries.\n    * If retryOn is provided, the default implementation of retryOn will not be used.\n    * In case of a custom retryOn, care should be taken to handle number of retries.\n    * Fetch-Retry honors only one of retryOn or retries options in the request.\n    *\n    * @param {string} url endpoint url\n    * @param {Request} requestOptions request options\n    * @param {RetryOptions} retryOptions retry options with keys being maxRetries and initialDelay in ms\n    * @param {Function|Array} retryOn Optional Function or Array. If provided, will be used instead of the default\n    * @param {Function|number} retryDelay Optional Function or number. If provided, will be used instead of the default\n    * @private\n    */\n  async exponentialBackoffHelper (url, requestOptions, retryOptions, retryOn, retryDelay) {\n    const retryFunctions = this.__getRetryOptions(retryOptions.maxRetries, retryOptions.initialDelayInMillis)\n    requestOptions.retries = retryOptions.maxRetries\n    requestOptions.retryOn = retryOn || retryFunctions.retryOn\n    requestOptions.retryDelay = retryDelay || retryFunctions.retryDelay\n\n    const proxyFetch = createFetch(retryOptions.proxy)\n    const fetch = require('fetch-retry')(proxyFetch)\n    return fetch(url, requestOptions)\n  }\n\n  /**\n    * Fetch the retry options with max retries and initial delay in millis\n    *\n    * @param {number} retries Max number of retries\n    * @param {number} initialDelayInMillis used for exponential backoff as the multiplying factor\n    * @returns {object} retryOptions {{retryDelay: (function(*=, *, *): number), retryOn: (function(...[*]=))}}\n    * @private\n    */\n  __getRetryOptions (retries, initialDelayInMillis) {\n    return {\n      retryOn: this.__getRetryOn(retries),\n      retryDelay: this.__getRetryDelay(initialDelayInMillis)\n    }\n  }\n\n  /**\n    * The function that evaluates the condition for retries.\n    * The retryOn function must return a boolean on evaluation\n    *\n    * @param {number} retries Max number of retries\n    * @returns {Function} retryOnFunction {function(...[*]=)}\n    * @private\n    */\n  __getRetryOn (retries) {\n    return function (attempt, error, response) {\n      if (attempt < retries && (error !== null || (response.status > 499 && response.status < 600))) {\n        const msg = `Retrying after attempt ${attempt + 1}. failed: ${error || response.statusText}`\n        logger.debug(msg)\n        return true\n      }\n      return false\n    }\n  }\n\n  /**\n    * Retry Delay returns a function that implements exponential backoff\n    *\n    * @param {number} initialDelayInMillis The multiplying factor and the initial delay. Eg. 100 would mean the retries would be spaced at 100, 200, 400, .. ms\n    * @returns {Function} retryDelayFunction {function(*=, *, *): number}\n    * @private\n    */\n  __getRetryDelay (initialDelayInMillis) {\n    return function (attempt, error, response) {\n      const timeToWait = Math.pow(2, attempt) * initialDelayInMillis // 1000, 2000, 4000\n      const msg = `Request will be retried after ${timeToWait} ms`\n      logger.debug(msg)\n      return timeToWait\n    }\n  }\n}\n\nmodule.exports = HttpExponentialBackoff\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}