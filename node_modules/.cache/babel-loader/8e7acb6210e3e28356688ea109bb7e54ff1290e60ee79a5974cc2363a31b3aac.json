{"ast":null,"code":"/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst fs = require('fs');\nconst path = require('path');\nconst exchange = require('@adobe/aemcs-api-client-lib');\nconst {\n  ErrorCodes\n} = require('@adobe/aem-headless-client-js');\nconst {\n  AUTH_FILE_READ_ERROR,\n  AUTH_FILE_PARSE_ERROR,\n  EXCHANGE_TOKEN_ERROR\n} = ErrorCodes;\nconst loggerNamespace = 'aem-headless-client-nodejs';\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, {\n  level: process.env.LOG_LEVEL\n});\n\n/**\n * Returns a Promise that resolves with a credentials JSON data.\n *\n * @param {string} credentialsFilePath - credentials config file path (serviceToken or devToken content)\n * @returns {Promise<any>} the response body wrapped inside a Promise\n */\nasync function getToken(credentialsFilePath) {\n  let authFileContent = '';\n  try {\n    const filePath = path.isAbsolute(credentialsFilePath) ? credentialsFilePath : path.join(process.cwd(), credentialsFilePath);\n    authFileContent = fs.readFileSync(filePath, 'utf8');\n    logger.debug('auth file read successfully');\n  } catch (error) {\n    logger.debug('auth file read error', error);\n    throw new AUTH_FILE_READ_ERROR({\n      messageValues: error.message\n    });\n  }\n  let config = null;\n  try {\n    config = JSON.parse(authFileContent);\n    logger.debug('auth file parsed successfully');\n  } catch (error) {\n    logger.debug('auth file parse error', error);\n    throw new AUTH_FILE_PARSE_ERROR({\n      messageValues: error.message\n    });\n  }\n  if (config.accessToken) {\n    // If config has DEV token\n    return {\n      accessToken: config.accessToken,\n      type: 'Bearer',\n      expires: 24 * 60 * 60 * 1000\n    };\n  }\n  return exchange(config).then(data => {\n    logger.debug('exchange token success');\n    return {\n      accessToken: data.access_token,\n      type: data.token_type,\n      expires: data.expires_in\n    };\n  }).catch(error => {\n    logger.debug('exchange token error', error);\n    throw new EXCHANGE_TOKEN_ERROR({\n      messageValues: error.message\n    });\n  });\n}\nmodule.exports = getToken;","map":{"version":3,"names":["fs","require","path","exchange","ErrorCodes","AUTH_FILE_READ_ERROR","AUTH_FILE_PARSE_ERROR","EXCHANGE_TOKEN_ERROR","loggerNamespace","logger","level","process","env","LOG_LEVEL","getToken","credentialsFilePath","authFileContent","filePath","isAbsolute","join","cwd","readFileSync","debug","error","messageValues","message","config","JSON","parse","accessToken","type","expires","then","data","access_token","token_type","expires_in","catch","module","exports"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/@adobe/aem-headless-client-nodejs/src/utils/auth.js"],"sourcesContent":["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst fs = require('fs')\nconst path = require('path')\nconst exchange = require('@adobe/aemcs-api-client-lib')\nconst { ErrorCodes } = require('@adobe/aem-headless-client-js')\nconst { AUTH_FILE_READ_ERROR, AUTH_FILE_PARSE_ERROR, EXCHANGE_TOKEN_ERROR } = ErrorCodes\nconst loggerNamespace = 'aem-headless-client-nodejs'\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, { level: process.env.LOG_LEVEL })\n\n/**\n * Returns a Promise that resolves with a credentials JSON data.\n *\n * @param {string} credentialsFilePath - credentials config file path (serviceToken or devToken content)\n * @returns {Promise<any>} the response body wrapped inside a Promise\n */\nasync function getToken (credentialsFilePath) {\n  let authFileContent = ''\n\n  try {\n    const filePath = path.isAbsolute(credentialsFilePath) ? credentialsFilePath : path.join(process.cwd(), credentialsFilePath)\n    authFileContent = fs.readFileSync(filePath, 'utf8')\n    logger.debug('auth file read successfully')\n  } catch (error) {\n    logger.debug('auth file read error', error)\n    throw new AUTH_FILE_READ_ERROR({\n      messageValues: error.message\n    })\n  }\n\n  let config = null\n  try {\n    config = JSON.parse(authFileContent)\n    logger.debug('auth file parsed successfully')\n  } catch (error) {\n    logger.debug('auth file parse error', error)\n    throw new AUTH_FILE_PARSE_ERROR({\n      messageValues: error.message\n    })\n  }\n\n  if (config.accessToken) {\n    // If config has DEV token\n    return {\n      accessToken: config.accessToken,\n      type: 'Bearer',\n      expires: 24 * 60 * 60 * 1000\n    }\n  }\n\n  return exchange(config)\n    .then(data => {\n      logger.debug('exchange token success')\n      return {\n        accessToken: data.access_token,\n        type: data.token_type,\n        expires: data.expires_in\n      }\n    })\n    .catch(error => {\n      logger.debug('exchange token error', error)\n      throw new EXCHANGE_TOKEN_ERROR({\n        messageValues: error.message\n      })\n    })\n}\n\nmodule.exports = getToken\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,QAAQ,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACvD,MAAM;EAAEG;AAAW,CAAC,GAAGH,OAAO,CAAC,+BAA+B,CAAC;AAC/D,MAAM;EAAEI,oBAAoB;EAAEC,qBAAqB;EAAEC;AAAqB,CAAC,GAAGH,UAAU;AACxF,MAAMI,eAAe,GAAG,4BAA4B;AACpD,MAAMC,MAAM,GAAGR,OAAO,CAAC,6BAA6B,CAAC,CAACO,eAAe,EAAE;EAAEE,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC;AAAU,CAAC,CAAC;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,QAAQA,CAAEC,mBAAmB,EAAE;EAC5C,IAAIC,eAAe,GAAG,EAAE;EAExB,IAAI;IACF,MAAMC,QAAQ,GAAGf,IAAI,CAACgB,UAAU,CAACH,mBAAmB,CAAC,GAAGA,mBAAmB,GAAGb,IAAI,CAACiB,IAAI,CAACR,OAAO,CAACS,GAAG,CAAC,CAAC,EAAEL,mBAAmB,CAAC;IAC3HC,eAAe,GAAGhB,EAAE,CAACqB,YAAY,CAACJ,QAAQ,EAAE,MAAM,CAAC;IACnDR,MAAM,CAACa,KAAK,CAAC,6BAA6B,CAAC;EAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,MAAM,CAACa,KAAK,CAAC,sBAAsB,EAAEC,KAAK,CAAC;IAC3C,MAAM,IAAIlB,oBAAoB,CAAC;MAC7BmB,aAAa,EAAED,KAAK,CAACE;IACvB,CAAC,CAAC;EACJ;EAEA,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAI;IACFA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACZ,eAAe,CAAC;IACpCP,MAAM,CAACa,KAAK,CAAC,+BAA+B,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,MAAM,CAACa,KAAK,CAAC,uBAAuB,EAAEC,KAAK,CAAC;IAC5C,MAAM,IAAIjB,qBAAqB,CAAC;MAC9BkB,aAAa,EAAED,KAAK,CAACE;IACvB,CAAC,CAAC;EACJ;EAEA,IAAIC,MAAM,CAACG,WAAW,EAAE;IACtB;IACA,OAAO;MACLA,WAAW,EAAEH,MAAM,CAACG,WAAW;MAC/BC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC1B,CAAC;EACH;EAEA,OAAO5B,QAAQ,CAACuB,MAAM,CAAC,CACpBM,IAAI,CAACC,IAAI,IAAI;IACZxB,MAAM,CAACa,KAAK,CAAC,wBAAwB,CAAC;IACtC,OAAO;MACLO,WAAW,EAAEI,IAAI,CAACC,YAAY;MAC9BJ,IAAI,EAAEG,IAAI,CAACE,UAAU;MACrBJ,OAAO,EAAEE,IAAI,CAACG;IAChB,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAACd,KAAK,IAAI;IACdd,MAAM,CAACa,KAAK,CAAC,sBAAsB,EAAEC,KAAK,CAAC;IAC3C,MAAM,IAAIhB,oBAAoB,CAAC;MAC7BiB,aAAa,EAAED,KAAK,CAACE;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;AACN;AAEAa,MAAM,CAACC,OAAO,GAAGzB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}