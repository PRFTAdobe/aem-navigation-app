{"ast":null,"code":"/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst loggerNamespace = '@adobe/aio-lib-core-networking:ProxyFetch';\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, {\n  level: process.env.LOG_LEVEL\n});\nconst originalFetch = require('node-fetch');\nconst {\n  codes\n} = require('./SDKErrors');\nconst HttpProxyAgent = require('http-proxy-agent');\nconst HttpsProxyAgent = require('https-proxy-agent');\nconst {\n  urlToHttpOptions\n} = require('./utils');\nconst http = require('http');\n\n/* global Response, Request */\n\n/**\n * Proxy Auth Options\n *\n * @typedef {object} ProxyAuthOptions\n * @property {string} proxyUrl - the proxy's url\n * @property {boolean} rejectUnauthorized - set to false to not reject unauthorized server certs\n */\n\n/**\n * This provides a wrapper for fetch that facilitates proxy auth authorization.\n */\nclass ProxyFetch {\n  /**\n   * Initialize this class with Proxy auth options\n   *\n   * @param {ProxyAuthOptions} authOptions the auth options to connect with\n   */\n  constructor(authOptions = {}) {\n    logger.debug(`constructor - authOptions: ${JSON.stringify(authOptions)}`);\n    const {\n      proxyUrl\n    } = authOptions;\n    const {\n      auth\n    } = urlToHttpOptions(proxyUrl);\n    if (!proxyUrl) {\n      const sdkDetails = {\n        proxyUrl,\n        auth\n      };\n      throw new codes.ERROR_PROXY_FETCH_INITIALIZATION({\n        sdkDetails,\n        messageValues: 'proxyUrl'\n      });\n    }\n    if (!auth) {\n      logger.debug('constructor: username or password not set, proxy is anonymous.');\n    }\n    this.authOptions = authOptions;\n    return this;\n  }\n\n  /**\n   * Returns the http.Agent used for this proxy\n   *\n   * @returns {http.Agent} a http.Agent for basic auth proxy\n   */\n  proxyAgent() {\n    const {\n      proxyUrl,\n      username,\n      password,\n      rejectUnauthorized = true\n    } = this.authOptions;\n    const proxyOpts = urlToHttpOptions(proxyUrl);\n    if (!proxyOpts.auth && username && password) {\n      logger.debug('username and password not set in proxy url, using credentials passed in the constructor.');\n      proxyOpts.auth = `${username}:${password}`;\n    }\n\n    // the passing on of this property to the underlying implementation only works on https-proxy-agent@2.2.4\n    // this is only used for unit-tests and passed in the constructor\n    proxyOpts.rejectUnauthorized = rejectUnauthorized;\n    if (rejectUnauthorized === false) {\n      logger.warn(`proxyAgent - rejectUnauthorized is set to ${rejectUnauthorized}`);\n    }\n    if (proxyOpts.protocol.startsWith('https')) {\n      return new HttpsProxyAgent(proxyOpts);\n    } else {\n      return new HttpProxyAgent(proxyOpts);\n    }\n  }\n\n  /**\n   * Fetch function, using the configured NTLM Auth options.\n   *\n   * @param {string | Request} resource - the url or Request object to fetch from\n   * @param {object} options - the fetch options\n   * @returns {Promise<Response>} Promise object representing the http response\n   */\n  async fetch(resource, options = {}) {\n    return originalFetch(resource, {\n      ...options,\n      agent: this.proxyAgent()\n    });\n  }\n}\nmodule.exports = ProxyFetch;","map":{"version":3,"names":["loggerNamespace","logger","require","level","process","env","LOG_LEVEL","originalFetch","codes","HttpProxyAgent","HttpsProxyAgent","urlToHttpOptions","http","ProxyFetch","constructor","authOptions","debug","JSON","stringify","proxyUrl","auth","sdkDetails","ERROR_PROXY_FETCH_INITIALIZATION","messageValues","proxyAgent","username","password","rejectUnauthorized","proxyOpts","warn","protocol","startsWith","fetch","resource","options","agent","module","exports"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/@adobe/aio-lib-core-networking/src/ProxyFetch.js"],"sourcesContent":["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst loggerNamespace = '@adobe/aio-lib-core-networking:ProxyFetch'\nconst logger = require('@adobe/aio-lib-core-logging')(loggerNamespace, { level: process.env.LOG_LEVEL })\nconst originalFetch = require('node-fetch')\nconst { codes } = require('./SDKErrors')\nconst HttpProxyAgent = require('http-proxy-agent')\nconst HttpsProxyAgent = require('https-proxy-agent')\nconst { urlToHttpOptions } = require('./utils')\nconst http = require('http')\n\n/* global Response, Request */\n\n/**\n * Proxy Auth Options\n *\n * @typedef {object} ProxyAuthOptions\n * @property {string} proxyUrl - the proxy's url\n * @property {boolean} rejectUnauthorized - set to false to not reject unauthorized server certs\n */\n\n/**\n * This provides a wrapper for fetch that facilitates proxy auth authorization.\n */\nclass ProxyFetch {\n  /**\n   * Initialize this class with Proxy auth options\n   *\n   * @param {ProxyAuthOptions} authOptions the auth options to connect with\n   */\n  constructor (authOptions = {}) {\n    logger.debug(`constructor - authOptions: ${JSON.stringify(authOptions)}`)\n    const { proxyUrl } = authOptions\n    const { auth } = urlToHttpOptions(proxyUrl)\n\n    if (!proxyUrl) {\n      const sdkDetails = { proxyUrl, auth }\n      throw new codes.ERROR_PROXY_FETCH_INITIALIZATION({ sdkDetails, messageValues: 'proxyUrl' })\n    }\n\n    if (!auth) {\n      logger.debug('constructor: username or password not set, proxy is anonymous.')\n    }\n\n    this.authOptions = authOptions\n    return this\n  }\n\n  /**\n   * Returns the http.Agent used for this proxy\n   *\n   * @returns {http.Agent} a http.Agent for basic auth proxy\n   */\n  proxyAgent () {\n    const { proxyUrl, username, password, rejectUnauthorized = true } = this.authOptions\n    const proxyOpts = urlToHttpOptions(proxyUrl)\n\n    if (!proxyOpts.auth && username && password) {\n      logger.debug('username and password not set in proxy url, using credentials passed in the constructor.')\n      proxyOpts.auth = `${username}:${password}`\n    }\n\n    // the passing on of this property to the underlying implementation only works on https-proxy-agent@2.2.4\n    // this is only used for unit-tests and passed in the constructor\n    proxyOpts.rejectUnauthorized = rejectUnauthorized\n    if (rejectUnauthorized === false) {\n      logger.warn(`proxyAgent - rejectUnauthorized is set to ${rejectUnauthorized}`)\n    }\n\n    if (proxyOpts.protocol.startsWith('https')) {\n      return new HttpsProxyAgent(proxyOpts)\n    } else {\n      return new HttpProxyAgent(proxyOpts)\n    }\n  }\n\n  /**\n   * Fetch function, using the configured NTLM Auth options.\n   *\n   * @param {string | Request} resource - the url or Request object to fetch from\n   * @param {object} options - the fetch options\n   * @returns {Promise<Response>} Promise object representing the http response\n   */\n  async fetch (resource, options = {}) {\n    return originalFetch(resource, {\n      ...options,\n      agent: this.proxyAgent()\n    })\n  }\n}\n\nmodule.exports = ProxyFetch\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,eAAe,GAAG,2CAA2C;AACnE,MAAMC,MAAM,GAAGC,OAAO,CAAC,6BAA6B,CAAC,CAACF,eAAe,EAAE;EAAEG,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC;AAAU,CAAC,CAAC;AACxG,MAAMC,aAAa,GAAGL,OAAO,CAAC,YAAY,CAAC;AAC3C,MAAM;EAAEM;AAAM,CAAC,GAAGN,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMO,cAAc,GAAGP,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMQ,eAAe,GAAGR,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAM;EAAES;AAAiB,CAAC,GAAGT,OAAO,CAAC,SAAS,CAAC;AAC/C,MAAMU,IAAI,GAAGV,OAAO,CAAC,MAAM,CAAC;;AAE5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMW,UAAU,CAAC;EACf;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,WAAW,GAAG,CAAC,CAAC,EAAE;IAC7Bd,MAAM,CAACe,KAAK,CAAE,8BAA6BC,IAAI,CAACC,SAAS,CAACH,WAAW,CAAE,EAAC,CAAC;IACzE,MAAM;MAAEI;IAAS,CAAC,GAAGJ,WAAW;IAChC,MAAM;MAAEK;IAAK,CAAC,GAAGT,gBAAgB,CAACQ,QAAQ,CAAC;IAE3C,IAAI,CAACA,QAAQ,EAAE;MACb,MAAME,UAAU,GAAG;QAAEF,QAAQ;QAAEC;MAAK,CAAC;MACrC,MAAM,IAAIZ,KAAK,CAACc,gCAAgC,CAAC;QAAED,UAAU;QAAEE,aAAa,EAAE;MAAW,CAAC,CAAC;IAC7F;IAEA,IAAI,CAACH,IAAI,EAAE;MACTnB,MAAM,CAACe,KAAK,CAAC,gEAAgE,CAAC;IAChF;IAEA,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACES,UAAUA,CAAA,EAAI;IACZ,MAAM;MAAEL,QAAQ;MAAEM,QAAQ;MAAEC,QAAQ;MAAEC,kBAAkB,GAAG;IAAK,CAAC,GAAG,IAAI,CAACZ,WAAW;IACpF,MAAMa,SAAS,GAAGjB,gBAAgB,CAACQ,QAAQ,CAAC;IAE5C,IAAI,CAACS,SAAS,CAACR,IAAI,IAAIK,QAAQ,IAAIC,QAAQ,EAAE;MAC3CzB,MAAM,CAACe,KAAK,CAAC,0FAA0F,CAAC;MACxGY,SAAS,CAACR,IAAI,GAAI,GAAEK,QAAS,IAAGC,QAAS,EAAC;IAC5C;;IAEA;IACA;IACAE,SAAS,CAACD,kBAAkB,GAAGA,kBAAkB;IACjD,IAAIA,kBAAkB,KAAK,KAAK,EAAE;MAChC1B,MAAM,CAAC4B,IAAI,CAAE,6CAA4CF,kBAAmB,EAAC,CAAC;IAChF;IAEA,IAAIC,SAAS,CAACE,QAAQ,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;MAC1C,OAAO,IAAIrB,eAAe,CAACkB,SAAS,CAAC;IACvC,CAAC,MAAM;MACL,OAAO,IAAInB,cAAc,CAACmB,SAAS,CAAC;IACtC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMI,KAAKA,CAAEC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACnC,OAAO3B,aAAa,CAAC0B,QAAQ,EAAE;MAC7B,GAAGC,OAAO;MACVC,KAAK,EAAE,IAAI,CAACX,UAAU,CAAC;IACzB,CAAC,CAAC;EACJ;AACF;AAEAY,MAAM,CAACC,OAAO,GAAGxB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}