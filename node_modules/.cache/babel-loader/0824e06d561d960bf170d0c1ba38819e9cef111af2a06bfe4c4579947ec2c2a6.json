{"ast":null,"code":"/*jshint node:true */\n\"use strict\";\n\n/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nconst {\n  HttpsProxyAgent\n} = require(\"https-proxy-agent\");\nconst axios = require('axios');\nconst util = require('util');\nconst qs = require('qs');\nvar jwt = require('jsonwebtoken');\n\n// base client lib with interceptors for requests to add logging.\nclass IMSJWTTokenExchange {\n  constructor(host, proxy) {\n    if (host === undefined) {\n      throw new Error(\"Client lib must have a target host defined, imsHost or jilHost\");\n    }\n    this.host = host;\n    if (proxy) {\n      var httpsAgent = new HttpsProxyAgent({\n        host: proxy.host,\n        port: proxy.port\n      });\n      this.request = axios.create({\n        baseURL: `https://${this.host}`,\n        timeout: 10000,\n        httpsAgent\n      });\n    } else {\n      this.request = axios.create({\n        baseURL: `https://${this.host}`,\n        timeout: 10000\n      });\n    }\n    this.request.interceptors.request.use(function (config) {\n      console.debug(`>> ${config.method} ${config.url}`);\n      if (config.verbose) {\n        console.debug(JSON.stringify(config, null, 2));\n      }\n      // Do something before request is sent\n      return config;\n    }, function (error) {\n      console.error(`Failed making request ${error.message}`);\n      // Do something with request error\n      return Promise.reject(error);\n    });\n    this.request.interceptors.response.use(function (response) {\n      // Do something with response data\n      console.debug(`<< ${response.config.method} ${response.config.url} ${response.status}`);\n      if (response.config.verbose) {\n        console.debug(util.inspect(response.data));\n      }\n      return response;\n    }, function (error) {\n      // Do something with response error\n      if (error.config) {\n        console.error(`Error performing operation ${error.message} request ${error.config.url}`);\n      } else {\n        console.error(`Error performing operation ${error.message} request (no config)`);\n      }\n      if (error.response) {\n        console.error(util.inspect(error.response.data));\n      }\n      return Promise.reject(error);\n    });\n  }\n  checkRequired(options, key) {\n    if (options[key] === undefined) {\n      throw new Error(`${key} is a required option.`);\n    }\n  }\n\n  /** \n  * @description Exchanges a integrtion for an access token using JWTToken exchange with IMS.\n  * @returns {\n  *    access_token,\n  *    token_type,\n  *    expires_in\n  *  }\n  *\n  *  @param {\n  *   issuer - the issuer. It must be present, and it must be in the format: org_ident@AdobeOrg/ \n  *       It represents the identity of the organization which issued the token, and it must be for \n  *       an organization that has provided IMS with a valid certificate. \n  *   subject - the subject. It must be present and must be in the format: user_ident@user_auth_src. \n  *       It represents the ident and authsrc of the technical account for which a certificate \n  *       has been uploaded to IMS\n  *   expiration_time_seconds - the expiration time. IMS allows a time skew of 30 seconds between \n  *       the time specified and the IMS server time.\n  *      \n  *   metascope[]\n  *       metascopes requested as a subset of the scopes available to the technical account.\n  *   client_id\n  *       The IMS client ID for the technical account, assigned on registration. The client must have the exchange_jwt scope.\n  *   client_secret\n  *       The IMS client secret for the technical account, assigned on registration. \n  *   privateKey\n  *       The private key associated with the certificate bound to the technical account.\n  * } options\n  */\n  async exchangeJwt(options) {\n    this.checkRequired(options, \"issuer\");\n    this.checkRequired(options, \"subject\");\n    this.checkRequired(options, \"expiration_time_seconds\");\n    this.checkRequired(options, \"metascope\");\n    this.checkRequired(options, \"client_id\");\n    this.checkRequired(options, \"client_secret\");\n    this.checkRequired(options, \"privateKey\");\n    var jwt_payload = {\n      iss: options.issuer,\n      sub: options.subject,\n      exp: options.expiration_time_seconds,\n      aud: `https://${this.host}/c/${options.client_id}`\n    };\n    options.metascope.map(v => {\n      jwt_payload[`https://${this.host}/s/${v}`] = true;\n    });\n\n    // sign with RSA256.\n    var jwt_token = jwt.sign(jwt_payload, options.privateKey, {\n      algorithm: 'RS256'\n    });\n    if (options.publicKey) {\n      console.debug(jwt.verify(jwt_token, options.publicKey, {\n        complete: true\n      }));\n    }\n    var body = qs.stringify({\n      client_id: options.client_id,\n      client_secret: options.client_secret,\n      jwt_token: jwt_token\n    });\n    var config = {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      },\n      verbose: options.verbose\n    };\n    var response = await this.request.post(`/ims/exchange/jwt`, body, config);\n    if (response.status === 200) {\n      return response.data;\n    }\n    throw Error(\"Failed to exchange jwt.\");\n  }\n}\nvar assertPresent = (config, path, missing) => {\n  const pathElements = path.split(\".\");\n  var c = config;\n  for (var p of pathElements) {\n    if (!c[p]) {\n      missing.push(path);\n      return;\n    }\n    c = c[p];\n  }\n};\nmodule.exports = async integrationConfig => {\n  var jwtExchange = undefined;\n  if (integrationConfig.proxy) {\n    jwtExchange = new IMSJWTTokenExchange(integrationConfig.integration.imsEndpoint, integrationConfig.proxy);\n  } else {\n    jwtExchange = new IMSJWTTokenExchange(integrationConfig.integration.imsEndpoint);\n  }\n  var missing = [];\n  assertPresent(integrationConfig, \"integration.org\", missing);\n  assertPresent(integrationConfig, \"integration.id\", missing);\n  assertPresent(integrationConfig, \"integration.technicalAccount.clientId\", missing);\n  assertPresent(integrationConfig, \"integration.technicalAccount.clientSecret\", missing);\n  assertPresent(integrationConfig, \"integration.metascopes\", missing);\n  assertPresent(integrationConfig, \"integration.privateKey\", missing);\n  assertPresent(integrationConfig, \"integration.publicKey\", missing);\n  if (missing.length > 0) {\n    throw new Error(\"The following configuration elements are missing \", missing.join(\",\"));\n  }\n  return await jwtExchange.exchangeJwt({\n    issuer: `${integrationConfig.integration.org}`,\n    subject: `${integrationConfig.integration.id}`,\n    expiration_time_seconds: Math.floor(Date.now() / 1000 + 3600 * 8),\n    metascope: integrationConfig.integration.metascopes.split(\",\"),\n    client_id: integrationConfig.integration.technicalAccount.clientId,\n    client_secret: integrationConfig.integration.technicalAccount.clientSecret,\n    privateKey: integrationConfig.integration.privateKey,\n    publicKey: integrationConfig.integration.publicKey\n  });\n};","map":{"version":3,"names":["HttpsProxyAgent","require","axios","util","qs","jwt","IMSJWTTokenExchange","constructor","host","proxy","undefined","Error","httpsAgent","port","request","create","baseURL","timeout","interceptors","use","config","console","debug","method","url","verbose","JSON","stringify","error","message","Promise","reject","response","status","inspect","data","checkRequired","options","key","exchangeJwt","jwt_payload","iss","issuer","sub","subject","exp","expiration_time_seconds","aud","client_id","metascope","map","v","jwt_token","sign","privateKey","algorithm","publicKey","verify","complete","body","client_secret","headers","post","assertPresent","path","missing","pathElements","split","c","p","push","module","exports","integrationConfig","jwtExchange","integration","imsEndpoint","length","join","org","id","Math","floor","Date","now","metascopes","technicalAccount","clientId","clientSecret"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/@adobe/aemcs-api-client-lib/index.js"],"sourcesContent":["/*jshint node:true */\n\"use strict\";\n\n/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst { HttpsProxyAgent } = require(\"https-proxy-agent\")\nconst axios = require('axios');\nconst util = require('util'); \nconst qs = require('qs');\nvar jwt = require('jsonwebtoken');\n\n// base client lib with interceptors for requests to add logging.\nclass IMSJWTTokenExchange {\n    constructor(host, proxy) {\n        if ( host === undefined ) {\n            throw new Error(\"Client lib must have a target host defined, imsHost or jilHost\");\n        }\n        this.host = host\n        if (proxy) {\n            var httpsAgent = new HttpsProxyAgent({host: proxy.host, port: proxy.port});\n            this.request = axios.create({\n                baseURL: `https://${this.host}`,\n                timeout: 10000,\n                httpsAgent\n            });\n        } else {\n            this.request = axios.create({\n                baseURL: `https://${this.host}`,\n                timeout: 10000\n            });\n        }\n\n\n        this.request.interceptors.request.use(function (config) {\n            console.debug(`>> ${config.method} ${config.url}`);\n            if ( config.verbose ) {\n                console.debug(JSON.stringify(config,null,2)); \n            }\n            // Do something before request is sent\n            return config;\n          }, function (error) {\n            console.error(`Failed making request ${error.message}`);\n            // Do something with request error\n            return Promise.reject(error);\n          });\n\n        this.request.interceptors.response.use(function (response) {\n            // Do something with response data\n            console.debug(`<< ${response.config.method} ${response.config.url} ${response.status}`);\n            if ( response.config.verbose ) {\n                console.debug(util.inspect(response.data)); \n            }\n            return response;\n          }, function (error) {\n            // Do something with response error\n            if ( error.config ) {\n                console.error(`Error performing operation ${error.message} request ${error.config.url}`);\n            } else {\n                console.error(`Error performing operation ${error.message} request (no config)`);\n            }\n            if ( error.response ) {\n                console.error(util.inspect(error.response.data));\n            }\n            return Promise.reject(error);\n          });\n    }\n\n    checkRequired(options, key) {\n        if ( options[key] === undefined ) {\n            throw new Error(`${key} is a required option.`);\n        }\n    }\n\n    /** \n    * @description Exchanges a integrtion for an access token using JWTToken exchange with IMS.\n    * @returns {\n    *    access_token,\n    *    token_type,\n    *    expires_in\n    *  }\n    *\n    *  @param {\n    *   issuer - the issuer. It must be present, and it must be in the format: org_ident@AdobeOrg/ \n    *       It represents the identity of the organization which issued the token, and it must be for \n    *       an organization that has provided IMS with a valid certificate. \n    *   subject - the subject. It must be present and must be in the format: user_ident@user_auth_src. \n    *       It represents the ident and authsrc of the technical account for which a certificate \n    *       has been uploaded to IMS\n    *   expiration_time_seconds - the expiration time. IMS allows a time skew of 30 seconds between \n    *       the time specified and the IMS server time.\n    *      \n    *   metascope[]\n    *       metascopes requested as a subset of the scopes available to the technical account.\n    *   client_id\n    *       The IMS client ID for the technical account, assigned on registration. The client must have the exchange_jwt scope.\n    *   client_secret\n    *       The IMS client secret for the technical account, assigned on registration. \n    *   privateKey\n    *       The private key associated with the certificate bound to the technical account.\n    * } options\n    */\n   async exchangeJwt(options) {\n        this.checkRequired(options, \"issuer\");\n        this.checkRequired(options, \"subject\");\n        this.checkRequired(options, \"expiration_time_seconds\");\n        this.checkRequired(options, \"metascope\");\n        this.checkRequired(options, \"client_id\");\n        this.checkRequired(options, \"client_secret\");\n        this.checkRequired(options, \"privateKey\");\n        var jwt_payload = {\n            iss: options.issuer,\n            sub: options.subject,\n            exp: options.expiration_time_seconds,\n            aud: `https://${this.host}/c/${options.client_id}`\n        }\n\n        options.metascope.map((v) => {\n            jwt_payload[`https://${this.host}/s/${v}`] = true;\n        });\n\n        // sign with RSA256.\n        var jwt_token = jwt.sign(jwt_payload, options.privateKey, { algorithm: 'RS256'});\n\n        if ( options.publicKey ) {\n            console.debug(jwt.verify(jwt_token, options.publicKey,{ complete: true}));\n        }\n\n\n        var body = qs.stringify({\n                client_id: options.client_id,\n                client_secret: options.client_secret,\n                jwt_token: jwt_token    \n            });\n        var config = {\n            headers: { 'content-type': 'application/x-www-form-urlencoded' },\n            verbose: options.verbose\n        };\n        var response = await this.request.post(`/ims/exchange/jwt`,body, config);\n        if ( response.status === 200) {\n            return response.data;\n        }\n        throw Error(\"Failed to exchange jwt.\")\n\n    }\n\n}\nvar assertPresent = (config, path, missing) => {\n    const pathElements = path.split(\".\");\n    var c = config;\n    for(var p of pathElements) {\n        if ( !c[p] ) {\n            missing.push(path);\n            return;\n        }\n        c = c[p];\n    }\n}\n\n\nmodule.exports = async (integrationConfig) => {\n        var jwtExchange = undefined;\n        if (integrationConfig.proxy) {\n            jwtExchange = new IMSJWTTokenExchange(integrationConfig.integration.imsEndpoint, integrationConfig.proxy);\n        } else {\n            jwtExchange = new IMSJWTTokenExchange(integrationConfig.integration.imsEndpoint);\n        }\n        \n        var missing = [];\n        assertPresent(integrationConfig, \"integration.org\", missing);\n        assertPresent(integrationConfig, \"integration.id\", missing);\n        assertPresent(integrationConfig, \"integration.technicalAccount.clientId\", missing);\n        assertPresent(integrationConfig, \"integration.technicalAccount.clientSecret\", missing);\n        assertPresent(integrationConfig, \"integration.metascopes\", missing);\n        assertPresent(integrationConfig, \"integration.privateKey\", missing);\n        assertPresent(integrationConfig, \"integration.publicKey\", missing);\n        if ( missing.length > 0 ) {\n            throw new Error(\"The following configuration elements are missing \",missing.join(\",\"));\n        }\n\n\t\treturn await jwtExchange.exchangeJwt({\n\t\t\t\tissuer: `${integrationConfig.integration.org}`,\n\t\t\t\tsubject: `${integrationConfig.integration.id}`, \n\t\t\t\texpiration_time_seconds: Math.floor((Date.now()/1000)+3600*8),\n\t\t\t\tmetascope: integrationConfig.integration.metascopes.split(\",\"),\n\t\t\t\tclient_id: integrationConfig.integration.technicalAccount.clientId,\n\t\t\t\tclient_secret: integrationConfig.integration.technicalAccount.clientSecret,\n\t\t\t\tprivateKey: integrationConfig.integration.privateKey,\n\t\t\t\tpublicKey: integrationConfig.integration.publicKey\n\t\t\t});\n};\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}