{"ast":null,"code":"/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst {\n  HttpExponentialBackoff\n} = require('@adobe/aio-lib-core-networking');\nconst AEMHeadlessApi = require('@adobe/aem-headless-client-js'); // eslint-disable-line\nconst getToken = require('./utils/auth');\n\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\nclass AEMHeadless extends AEMHeadlessApi {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.fetch] - custom Fetch instance - default @adobe/aio-lib-core-networking\n   */\n  constructor(config) {\n    const fetchRetry = new HttpExponentialBackoff();\n    const fetch = config.fetch || fetchRetry.exponentialBackoff.bind(fetchRetry);\n    let extendedConfig = {\n      fetch\n    };\n    if (typeof config !== 'string') {\n      extendedConfig = {\n        fetch,\n        ...config\n      };\n    } else {\n      extendedConfig.serviceURL = config;\n    }\n    super(extendedConfig);\n  }\n}\nmodule.exports = AEMHeadless;\nmodule.exports.getToken = getToken;\nmodule.exports.AEMHeadless = AEMHeadless;","map":{"version":3,"names":["HttpExponentialBackoff","require","AEMHeadlessApi","getToken","AEMHeadless","constructor","config","fetchRetry","fetch","exponentialBackoff","bind","extendedConfig","serviceURL","module","exports"],"sources":["/Users/josiah.huckins/Development/Perficient Blogging/react/aem-navigation-app/node_modules/@adobe/aem-headless-client-nodejs/src/index.js"],"sourcesContent":["/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst { HttpExponentialBackoff } = require('@adobe/aio-lib-core-networking')\nconst AEMHeadlessApi = require('@adobe/aem-headless-client-js') // eslint-disable-line\nconst getToken = require('./utils/auth')\n\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\nclass AEMHeadless extends AEMHeadlessApi {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.fetch] - custom Fetch instance - default @adobe/aio-lib-core-networking\n   */\n  constructor (config) {\n    const fetchRetry = new HttpExponentialBackoff()\n    const fetch = config.fetch || fetchRetry.exponentialBackoff.bind(fetchRetry)\n    let extendedConfig = {\n      fetch\n    }\n\n    if (typeof config !== 'string') {\n      extendedConfig = {\n        fetch,\n        ...config\n      }\n    } else {\n      extendedConfig.serviceURL = config\n    }\n\n    super(extendedConfig)\n  }\n}\nmodule.exports = AEMHeadless\nmodule.exports.getToken = getToken\nmodule.exports.AEMHeadless = AEMHeadless\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAuB,CAAC,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAC5E,MAAMC,cAAc,GAAGD,OAAO,CAAC,+BAA+B,CAAC,EAAC;AAChE,MAAME,QAAQ,GAAGF,OAAO,CAAC,cAAc,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,SAASF,cAAc,CAAC;EACvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAAEC,MAAM,EAAE;IACnB,MAAMC,UAAU,GAAG,IAAIP,sBAAsB,CAAC,CAAC;IAC/C,MAAMQ,KAAK,GAAGF,MAAM,CAACE,KAAK,IAAID,UAAU,CAACE,kBAAkB,CAACC,IAAI,CAACH,UAAU,CAAC;IAC5E,IAAII,cAAc,GAAG;MACnBH;IACF,CAAC;IAED,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;MAC9BK,cAAc,GAAG;QACfH,KAAK;QACL,GAAGF;MACL,CAAC;IACH,CAAC,MAAM;MACLK,cAAc,CAACC,UAAU,GAAGN,MAAM;IACpC;IAEA,KAAK,CAACK,cAAc,CAAC;EACvB;AACF;AACAE,MAAM,CAACC,OAAO,GAAGV,WAAW;AAC5BS,MAAM,CAACC,OAAO,CAACX,QAAQ,GAAGA,QAAQ;AAClCU,MAAM,CAACC,OAAO,CAACV,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}